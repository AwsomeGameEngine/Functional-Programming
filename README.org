#+TITLE: Functional Programming by Example
#+AUTHOR: Caio Rodrigues Soares Silva
#+EMAIL: <caiorss.rodrigues@gmail.com>
#+DESCRIPTION: Functional programming examples, theory, 
#+URL:   https://github.com/caiorss/Functional-Programming
#+HTML_HEAD: <link href="/theme/index.css" rel="stylesheet">

# * Functional Programming by Example

file:haskell/images/haskellLogo.png

The purpose of this tutorial is to illustrate functional programming
concepts in many languages by providing reusable and useful snippets
of code, examples, case studies and applications.


Author:   [[https://www.linkedin.com/in/caiorodrigues][Caio Rodrigues]] / <caiorss.rodrigue@gmail.com> 

Note: This still a work in progress and a long term project.

You can access this page from:

 - https://github.com/caiorss/Functional-Programming

 - http://tinyurl.com/fpbyexample

The website of this repository is:

 - http://caiorss.github.io/Functional-Programming  


This repository is dedicated to public domain.

*Concepts*

 - [[file:haskell/Functional_Programming_Concepts.org][Functional Programming Concepts]]

*Functional Programming in Haskell*

 - [[file:haskell/Haskell.org][Haskell]]
 - [[file:haskell/Basic_Syntax.org][Basic Syntax]]
 - [[file:haskell/Functions.org][Functions]]
 - [[file:haskell/Pattern_Matching.org][Pattern Matching]]
 - [[file:haskell/List_Comprehension.org][List Comprehension]]
 - [[file:haskell/Algebraic_Data_Types.org][Algebraic Data Type]]
 - [[file:haskell/Functors__Monads__Applicatives_and_Monoids.org][Functors, Monads, Applicatives and Monoids]]
 - [[file:haskell/Libraries.org][Haskell Libraries]]
 - [[file:haskell/Useful_Custom_Functions__Iterators_and_Operators.org][Useful Custom Functions/ Iterators and Operators]]
 - [[file:haskell/Applications.org][Applications]]
 - [[file:haskell/Miscellaneous.org][Miscellaneous]]
 - [[file:haskell/Documentation_and_Learning_Materials.org][Documentation and Learning Materials]]

 - [[file:haskell/Real_World_Haskell.org][Codes and Examples of the book Real World Haskell]]

 - Modules

   - [[file:haskell/control_monad.org][Contro.Monad]]      - Monad Combinators 
    
   - [[file:haskell/package_Data_Text.org][Data.Text]]         - String processing combinators.

   - [[file:haskell/system_io_modules.org][System IO Modules]] - Basic System IO Modules

   - [[file:haskell/system_filepath.org][System.FilePath]]   - File path manipuation on all platforms. 

   - [[file:haskell/control_exception.org][Control.Exception]] - Exception Handling 

*Functional Programming in OCaml*

 - [[file:ocaml/README.org][OCaml]]

*Functional Programming in Scheme*

 - [[file:scheme/README.org][Scheme]]

*Functional Programming in Clojure*

 - [[file:clojure/README.org][Clojure]]  

*Papers* 

 - [[file:papers/README.org][Papers in this Repository]]
