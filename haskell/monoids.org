#+INCLUDE: ../theme/style.org
#+TITLE: Monoids

* Monoids 
** Overview 


A monoid is a type constructor with an identity value _mempty_ and a
binary operation _mappend_ that defines how two monoids can be
combined to generate a new one. The function moncat concatenates a
list of monoids into a one monoid.

The monoid type class and monoid combinators are defined in the module
[[https://hackage.haskell.org/package/base-4.8.2.0/docs/Data-Monoid.html][Data.Monoid]].

#+BEGIN_SRC haskell 
class Monoid m where

    {- Identity Element -}
    mempty :: m

    {- Associative / Binary operator - the alias 
       for mappend is (<>) -}
    mappend :: m -> m -> m

    {- Fold a list using the monoid -}
    mconcat :: [m] -> m
    mconcat ms = foldr mappend mempty ms

#+END_SRC

*Mappend*

Combine two monoids into a new one. 

#+BEGIN_SRC haskell 
mappend :: Monoid m => m -> m -> m 
#+END_SRC

*Mappend Operator*

Alias for Mappend. 

#+BEGIN_SRC haskell 
(<>) :: Monoid a => a -> a -> a 
(<>) = mappend 
#+END_SRC

*Moncat*

Append a list of monoids into a new one. 

#+BEGIN_SRC haskell 
moncat :: Monoid m => [m] -> m
#+END_SRC

*Monoid Properties*


| Monoid Laws    |               |   |               |
|----------------+---------------+---+---------------|
| Associativity  | a <> (b <> c) | = | (a <> b) <> c |
| Left Identity  | mempty <> a   | = | a             |
| Right Identity | a <> mempty   | = | a             |


*Some Monoids*

| Monoid         | Operation | Identity |
|----------------+-----------+----------|
| Natural Number | +         | 0        |
| Integer > 0    | *         | 1        |
| Lists          | ++        | []       |
| Strings        | ++        | ""       |

** Instances of Monoid Type Class 
*** List

#+BEGIN_SRC haskell 
instance Monoid [a] where
    mempty  = []
    mappend = (++)

    -- mconcat :: [m] -> m
    -- mconcat ms = foldr mappend mempty ms
    mconcat = concat 
#+END_SRC

Example:

#+BEGIN_SRC haskell 

----------------------
-- Test List Monoids 

>>> import Data.Monoid
>>> 
>>> :t mconcat
mconcat :: Monoid a => [a] -> a
>>> 
>>> :t mempty
mempty :: Monoid a => a
>>> 
>>> :t mappend
mappend :: Monoid a => a -> a -> a
>>> 
>>> :t (<>)
(<>) :: Monoid m => m -> m -> m
>>>

>>> [9, 3] <> [1, 2, 3]
[9,3,1,2,3]
>>> 

>>> mempty :: [a]
[]
>>> 

>>> [1, 2, 3] <> mempty 
[1,2,3]

>>> mempty <> [1, 2, 3]
[1,2,3]
>>> 

>>> [9, 3] <> [1, 2, 3] <> [9, 3, 10]
[9,3,1,2,3,9,3,10]
>>> 

>>> [9, 3] `mappend` [1, 2, 3] `mappend` [9, 3, 10]
[9,3,1,2,3,9,3,10]
>>> 

#+END_SRC

*** String

Strings are similar to lists and the mempty element is a empty string.

#+BEGIN_SRC haskell 
>>> import Data.Monoid

>>> :t mempty
mempty :: Monoid a => a
>>> 

>>> mempty :: String
""
>>> 

>>> :t mappend
mappend :: Monoid a => a -> a -> a
>>> 

>>> "Testing " `mappend` " String " `mappend` " monoids"
"Testing  String  monoids"
>>> 

>>> "Testing " <> " String " <> " monoids"
"Testing  String  monoids"
>>> 

>>> :t mconcat
mconcat :: Monoid a => [a] -> a
>>> 


>>> mconcat ["Testing ", "String", " monoids"]
"Testing String monoids"
>>> 
#+END_SRC

*** Sum

#+BEGIN_SRC haskell 
-- | Monoid under addition.
newtype Sum a = Sum { getSum :: a }
        deriving (Eq, Ord, Read, Show, Bounded, Generic, Generic1, Num)

instance Num a => Monoid (Sum a) where
        mempty = Sum 0
        mappend = coerce ((+) :: a -> a -> a)
--        Sum x `mappend` Sum y = Sum (x + y)
#+END_SRC

Example: 

#+BEGIN_SRC haskell 

>>> import Data.Monoid


{- Sum Monoid 
 ----------------------------------}

>>> mempty :: Sum Int
Sum {getSum = 0}

>>> mempty :: Product Int
Product {getProduct = 1}
>>> 

>>> getSum (mempty :: Sum Int)
0

>>> 1 <> mempty <> 2 <> 3 <> 10 :: Sum Int
Sum {getSum = 16}
>>> 

>>> 1 `mappend` mempty `mappend` 2 `mappend` 3 `mappend` 10 :: Sum Int
Sum {getSum = 16}
>>> 

>>> mconcat [1, mempty, 2, 3, 10] :: Sum Int
Sum {getSum = 16}
>>> 

>>> getSum ( mconcat [1, mempty, 2, 3, 10] :: Sum Int)
16
>>> 

#+END_SRC

*** Product

#+BEGIN_SRC haskell
-- | Monoid under multiplication.
newtype Product a = Product { getProduct :: a }
        deriving (Eq, Ord, Read, Show, Bounded, Generic, Generic1, Num)

instance Num a => Monoid (Product a) where
        mempty = Product 1
        mappend = coerce ((*) :: a -> a -> a)
--        Product x `mappend` Product y = Product (x * y)
#+END_SRC

Example:

#+BEGIN_SRC haskell 
>>> import Data.Monoid


{- Product Monoid  
 ---------------------------------}

>>> 2 <> mempty :: Product Int
Product {getProduct = 2}
>>> mempty <> mempty :: Product Int
Product {getProduct = 1}
>>> mempty <> 2 :: Product Int
Product {getProduct = 2}
>>> 

>>> getProduct (mempty :: Product Int)
1
>>> 

>>> 2 <> 3 :: Product Int
Product {getProduct = 6}
>>> 
>>> getProduct (2 <> 3 :: Product Int)
6
>>> 

>>> mconcat [1, 2, 3, 4, 5, mempty] :: Product Int
Product {getProduct = 120}
>>> 

>>> getProduct ( mconcat [1, 2, 3, 4, 5, mempty] :: Product Int)
120
>>> 

:{
let value :: Product Int 
    value = mconcat [1, 2, 3, 4, 5, mempty]
:}

>>> value
Product {getProduct = 120}
>>> 

#+END_SRC

*** Maybe

It is useful to deal with monoids resulting from failed
computations. 

The contents of Maybe must be an instance of Monoid type
class.

#+BEGIN_SRC haskell 
instance Monoid a => Monoid (Maybe a) where

  mempty = Nothing

  Nothing `mappend` m       = m
  m       `mappend` Nothing = m
  Just m1 `mappend` Just m2 = Just (m1 `mappend` m2)
#+END_SRC

Example:

#+BEGIN_SRC haskell 
>>> mempty :: Maybe String
Nothing
>>> 

>>> Just "Hello " `mappend` Just "World"
Just "Hello World"
>>> 

>>> Just "Hello "  `mappend` Nothing
Just "Hello "
>>>

>>> Nothing  `mappend` Just "World"
Just "World"
>>> 

>>> Nothing `mappend` Nothing
Nothing
>>> 


>>> Just "Hello " <> Nothing 
Just "Hello "
>>> 

>>> Just "Hello " <>  Just "World"
Just "Hello World"
>>> 

>>> Just "Hello " <>  Just "World" <> Just " Haskell" <> Just " rocks!"
Just "Hello World Haskell rocks!"
>>> 

>>> Just "Hello " <>  Nothing <> Nothing  <> Just " rocks!"
Just "Hello  rocks!"
>>> 

>>> mconcat [Just "Hello ", Nothing, Just " Haskell", Just " rocks"]
Just "Hello  Haskell rocks"
>>> 

>>> mconcat [Nothing, Nothing]
Nothing
>>> 

>>> mconcat [] :: Maybe String
Nothing
>>> 


>>> Just (Product 4) <> Just (Product 5)
Just (Product {getProduct = 20})
>>> 

>>> Just (Product 4) <> Nothing
Just (Product {getProduct = 4})
>>> 

>>> Just (Product 4)  <> Nothing <> Just (Product 5) <> Just (Product 3)
Just (Product {getProduct = 60})
>>> 

>>> mconcat [Just $ Sum 2, Just $ Sum 3, Nothing, Just $ Sum 10, Nothing]
Just (Sum {getSum = 15})
>>>

>>> fmap getSum $ mconcat [Just $ Sum 2, Just $ Sum 3, Nothing, Just $ Sum 10, Nothing]
Just 15
>>> 

>>> getSum <$> mconcat [Just $ Sum 2, Just $ Sum 3, Nothing, Just $ Sum 10, Nothing]
Just 15
>>> 
#+END_SRC

*** First

Gets the first Just value of the two operands. The content of Maybe
doesn't need to be a instance of Monoid type class. 

#+BEGIN_SRC haskell 
newtype First a = First { getFirst :: Maybe a }  
     deriving (Eq, Ord, Read, Show)  


instance Monoid (First a) where  

     mempty = First Nothing  

     First (Just x) `mappend` _ = First (Just x)  
     First Nothing  `mappend` x = x  
#+END_SRC


Example: 

#+BEGIN_SRC haskell 
>>> First (Just 100)
First {getFirst = Just 100}
>>> 

>>> getFirst $ First (Just 100)
Just 100
>>> 

>>> getFirst $ First Nothing
Nothing
>>> 

>>> First (Just 100) <> First Nothing
First {getFirst = Just 100}
>>> 

>>> First (Just 100) <> First (Just 10)
First {getFirst = Just 100}
>>> 

>>> First Nothing <> First (Just 10)
First {getFirst = Just 10}
>>> 

>>> First Nothing <> First Nothing
First {getFirst = Nothing}
>>> 

>>> mconcat [First Nothing, First (Just 10), First (Just 2)]
First {getFirst = Just 10}

>>> mconcat [First Nothing, First Nothing, First (Just 2)]
First {getFirst = Just 2}
>>> 

>>> mconcat [First Nothing, First Nothing, First Nothing]
First {getFirst = Nothing}
>>> 


#+END_SRC

*** Last

Gets the last Just value of two operands. The contents of Maybe
doesn't need to be a instance of Monoid. 

#+BEGIN_SRC haskell 
newtype Last a = Last { getLast :: Maybe a }
        deriving (Eq, Ord, Read, Show, Generic, Generic1,
                  Functor, Applicative, Monad)

instance Monoid (Last a) where
        mempty = Last Nothing
        l `mappend` Last Nothing = l
        _ `mappend` r            = r
#+END_SRC

Example:

#+BEGIN_SRC haskell 
>>> import Data.Monoid 
>>> 

>>> :info Last
newtype Last a = Last {getLast :: Maybe a}
  	-- Defined in ‘Data.Monoid’
instance Eq a => Eq (Last a) -- Defined in ‘Data.Monoid’
instance Monad Last -- Defined in ‘Data.Monoid’
instance Functor Last -- Defined in ‘Data.Monoid’
instance Ord a => Ord (Last a) -- Defined in ‘Data.Monoid’
instance Read a => Read (Last a) -- Defined in ‘Data.Monoid’
instance Show a => Show (Last a) -- Defined in ‘Data.Monoid’
instance Applicative Last -- Defined in ‘Data.Monoid’
instance Monoid (Last a) -- Defined in ‘Data.Monoid’
>>>

>>> Last Nothing
Last {getLast = Nothing}
>>> Last (Just 100)
Last {getLast = Just 100}
>>> 

>>> getLast $ Last (Just 100)
Just 100
>>> getLast $ Last Nothing
Nothing
>>> 

>>> Last (Just 10) <> Last (Just 100)
Last {getLast = Just 100}
>>> 
>>> Last Nothing `mappend` Last (Just 100)
Last {getLast = Just 100}
>>> 
>>> Last (Just 10) <> Last Nothing
Last {getLast = Just 10}
>>> 
>>> Last Nothing <> Last (Just 100)
Last {getLast = Just 100}
>>> 
>>> Last Nothing <> Last Nothing
Last {getLast = Nothing}
>>> 

>>> mconcat [Last (Just 10), Last (Just 2), Last Nothing, Last (Just 3)]
Last {getLast = Just 3}
>>> 

>>> mconcat [Last (Just 6),  Last Nothing, Last (Just 3)]
Last {getLast = Just 3}
>>> 

>>> mconcat [Last (Just 6),  Last Nothing]
Last {getLast = Just 6}
>>> 

>>> mconcat [Last Nothing]
Last {getLast = Nothing}
>>>


#+END_SRC

** References

 - Module:  [[https://hackage.haskell.org/package/base-4.8.2.0/docs/Data-Monoid.html][Data.Monoid]]

 - Source of Module: [[https://hackage.haskell.org/package/base-4.8.2.0/docs/src/Data.Monoid.html#Last][Data.Monoid]]

 - [[https://wiki.haskell.org/Monoid][Monoids - Haskell Wiki]]

 - http://www.scs.stanford.edu/14sp-cs240h/slides/phantoms.html

 - [[https://twdkz.wordpress.com/2013/05/31/data-analysis-with-monoids/][Data analysis with Monoids | twdkz]]
